var sound=function(){var obj={};obj.pop=function(){new Audio(STATIC_PATH+"pop.wav").play()};obj.swing=function(){new Audio(STATIC_PATH+"swing.wav").play()};return obj}();var json=function(){var obj={};var lastGetState=null;obj.disableCaching=function(){$.ajaxSetup({cache:false})};obj.getState=function(callback){var currentTime=new Date;if(currentTime-lastGetState>50){$.getJSON($SCRIPT_ROOT+"/getstate",{game_id:GAME_ID,player_id:PLAYER_ID},callback);lastGetState=currentTime}};obj.start=function(callback){$.getJSON($SCRIPT_ROOT+"/start",{game_id:GAME_ID,player_id:PLAYER_ID},callback)};obj.playCard=function(cardId,selectedColor,callback){$.getJSON($SCRIPT_ROOT+"/playcard",{game_id:GAME_ID,player_id:PLAYER_ID,card_id:cardId,selected_color:selectedColor},callback)};obj.draw=function(callback){$.getJSON($SCRIPT_ROOT+"/draw",{game_id:GAME_ID,player_id:PLAYER_ID},callback)};return obj}();var Title=function(){var title="RUNO";this.element=$('<div id="title">'+title+"</div>")};Title.prototype.update=function(game_data){var title="RUNO -- "+game_data["name"];this.element.text(title)};var Controls=function(startHandler){this.element=$('<div id="controls"></div>');this.startButtonOn=false;this.startButton=$('<a class="game-control">Start</a>');this.startButton.attr("href","#");this.startButton.attr("id","start-button");if(startHandler){this.startButton.on("click",startHandler)}this.quitButton=$('<a class="game-control">Quit</a>');this.quitButton.attr("href",QUIT_URL);this.quitButton.attr("id","quit-button");this.element.append(this.quitButton)};Controls.prototype.update=function(game_data){var isAdmin;for(var i=0;i<game_data.players.length;i++){if(game_data.players[i].id){isAdmin=game_data.players[i].admin}}if(!this.startButtonOn){if(isAdmin){if(!game_data.started_at){this.element.prepend(this.startButton);this.startButtonOn=true}}}else{if(isAdmin){if(game_data.started_at){this.startButton.remove();this.startButtonOn=false}}}};var TopBar=function(startHandler){this.element=$('<div id="topbar"></div>');this.title=new Title;this.controls=new Controls(startHandler);this.element.append(this.title.element);this.element.append(this.controls.element)};TopBar.prototype.update=function(game_data){this.title.update(game_data);this.controls.update(game_data)};var FlashMessage=function(message){this.element=$('<div class="alert">'+message.data+"</div>");this.element.addClass("alert-"+message.type);var element=this.element;setTimeout(function(){element.addClass("alert-active");setTimeout(function(){element.removeClass("alert-active");setTimeout(function(){element.remove()},750)},2500)},50)};var Flash=function(){this.element=$('<div id="flash"></div>')};Flash.prototype.update=function(game_data){for(var i=0;i<game_data.messages.length;i++){this.element.append(new FlashMessage(game_data.messages[i]).element)}};var Player=function(playerJSON){this.id=playerJSON.id;this.uxId=playerJSON.ux_id;this.points=playerJSON.points;this.roundsWon=playerJSON.rounds_won;this.numCards=playerJSON.hand_size;this.isActive=playerJSON.active;this.isAdmin=playerJSON.admin;this.isGameWinner=playerJSON.game_winner;this.isDrawRequired=playerJSON.draw_required;if(this.id){this.name="Me"}else{this.name=playerJSON.name}this.element=$('<tr class="player"></tr>');this.nameElement=$("<td></td>");this.nameElement.text(this.name);this.pointsElement=$("<td></td>");this.roundsWonElement=$("<td></td>");this.numCardsElement=$("<td></td>");this.element.append(this.nameElement);this.element.append(this.pointsElement);this.element.append(this.roundsWonElement);this.element.append(this.numCardsElement);if(this.isActive){this.activate()}};Player.prototype.activate=function(){var element=this.element;setTimeout(function(){element.addClass("player-active")},1500)};Player.prototype.deactivate=function(){var element=this.element;setTimeout(function(){element.removeClass("player-active")},250)};Player.prototype.update=function(playerJSON,game_data){this.points=playerJSON.points;this.pointsElement.text(this.points);this.roundsWon=playerJSON.rounds_won;this.roundsWonElement.text(this.roundsWon);this.numCards=playerJSON.hand_size;this.numCardsElement.text(this.numCards);this.isGameWinner=playerJSON.game_winner;this.isDrawRequired=playerJSON.draw_required;this.isAdmin=playerJSON.admin;if(playerJSON.active&&!this.isActive){this.activate()}else if(!playerJSON.active&&this.isActive){this.deactivate()}if(this.isGameWinner){this.element.addClass("player-winner")}this.isActive=playerJSON.active};var Players=function(){this.element=$('<tbody id="players"></tbody>');this.players=[]};Players.prototype.indexOf=function(uxId){for(var i=0;i<this.players.length;i++){if(uxId==this.players[i].uxId){return i}}return-1};Players.prototype.removePlayer=function(player){var index=this.indexOf(player.uxId);if(index!==-1){player.element.remove();this.players.splice(index,1)}};Players.prototype.removePlayers=function(game_data){var remove=[];var playerExists;for(var i=0;i<this.players.length;i++){playerExists=false;for(var j=0;j<game_data.players.length;j++){if(this.players[i].uxId==game_data.players[j].ux_id){playerExists=true;break}}if(!playerExists){remove.push(this.players[i])}}for(var i=0;i<remove.length;i++){this.removePlayer(remove[i])}};Players.prototype.addPlayers=function(game_data){var newPlayer;var playerExists;for(var i=0;i<game_data.players.length;i++){playerExists=false;for(var j=0;j<this.players.length;j++){if(game_data.players[i].ux_id==this.players[j].uxId){playerExists=true;break}}if(!playerExists){newPlayer=new Player(game_data.players[i]);this.players.push(newPlayer);this.element.append(newPlayer.element)}}};Players.prototype.update=function(game_data){this.removePlayers(game_data);this.addPlayers(game_data);var index;for(var i=0;i<game_data.players.length;i++){index=this.indexOf(game_data.players[i].ux_id);this.players[index].update(game_data.players[i],game_data)}};var Scoreboard=function(){this.element=$('<table id="scoreboard" class="table table-condensed"></table>');this.element.append("<thead><tr><th>Name</th><th>Points</th><th>Rounds</th><th>Cards</th></tr></thead>");this.players=new Players;this.element.append(this.players.element)};Scoreboard.prototype.update=function(game_data){this.players.update(game_data)};var Card=function(value,color){var makeDummyCardValueData=function(){var startTag='<span class="card-content-value-dummy">';var endTag="</span>";var value="DRAW CARD";var element=startTag+value+endTag;return element};var makeWordCardValueData=function(){var valueMap={DRAW_TWO:["üòù","Draw Two",false],WILD_DRAW_FOUR:["üòà","Draw Four",true],REVERSE:["üòõ","Reverse",false],SKIP:["üòÇ","Skip",false],WILD:["üòä","",true]};var iconStartTag='<span class="card-content-value-icon">';var iconEndTag="</span>";var iconElement="";var icon=valueMap[value][0];if(icon){iconElement=iconStartTag+icon+iconEndTag}var wildStartTag='<span class="card-content-value-wild">';var wildEndTag="</span>";var wildElement="";var isWild=valueMap[value][2];if(isWild){var wild="WILD";wildElement=wildStartTag+wild+wildEndTag}var wordStartTag='<span class="card-content-value-word">';var wordEndTag="</span>";var wordElement="";var word=valueMap[value][1];if(word){wordElement=wordStartTag+word+wordEndTag}return iconElement+wildElement+wordElement};var makeNumberCardValueData=function(){var numStartTag='<span class="card-content-value-number">';var numEndTag="</span>";var numElement=numStartTag+value+numEndTag;return numElement};var makeCardContent=function(){var startTag='<a class="card-content" href="#">';var endTag="</a>";var valueStartTag='<span class="card-content-value">';var valueEndTag="</span>";var valueElement;var valueData;if(!isNaN(value)){valueData=makeNumberCardValueData()}else if(value==="DUMMY"){valueData=makeDummyCardValueData()}else{valueData=makeWordCardValueData()}valueElement=valueStartTag+valueData+valueEndTag;var content;content=$(startTag+valueElement+endTag);if(color){content.addClass("card-"+color.toLowerCase())}return content};this.value=value;this.color=color;this.contentElement=makeCardContent();this.contentElement.on("click",function(){return false});this.element=$('<div class="card"></div>');this.element.append(this.contentElement)};Card.prototype.isActive=function(){return this.element.hasClass("card-active")};Card.prototype.activate=function(){this.element.addClass("card-active")};Card.prototype.deactivate=function(){this.element.removeClass("card-active")};Card.prototype.remove=function(){this.element.remove()};var DiscardCard=function(cardJSON){var value=cardJSON.value;var color=cardJSON.color;var id=cardJSON.id;Card.call(this,value,color);this.id=id};DiscardCard.prototype=Object.create(Card.prototype);DiscardCard.prototype.constructor=DiscardCard;var InteractiveCard=function(value,color,handler){Card.call(this,value,color);var that=this;this.contentElement.on("click",function(e){if(handler&&that.isActive()){handler.call(that,e)}return false})};InteractiveCard.prototype=Object.create(Card.prototype);InteractiveCard.prototype.constructor=InteractiveCard;InteractiveCard.prototype.activate=function(active){this.contentElement.addClass("card-content-clickable");Card.prototype.activate.call(this)};InteractiveCard.prototype.deactivate=function(active){this.contentElement.removeClass("card-content-clickable");Card.prototype.deactivate.call(this)};var DrawCard=function(onSuccess,onFailure){InteractiveCard.call(this,"DUMMY",null,function(){json.draw(function(data){if(data.result&&onSuccess){onSuccess()}else if(!data.result&&onFailure){onFailure()}})})};DrawCard.prototype=Object.create(InteractiveCard.prototype);DrawCard.prototype.constructor=DrawCard;var PlayerCard=function(cardJSON,onSuccess,onFailure){var value=cardJSON.value;var color=cardJSON.color;InteractiveCard.call(this,value,color,function(){json.playCard(this.id,null,function(data){if(data.result&&onSuccess){onSuccess()}else if(!data.result&&onFailure){onFailure()}})});this.id=cardJSON.id};PlayerCard.prototype=Object.create(InteractiveCard.prototype);PlayerCard.prototype.constructor=PlayerCard;var ColorSelectorButton=function(cardId,color,onSuccess,onFailure){this.id=cardId;this.color=color.toUpperCase();this.element=$('<a class="color-selector-button" href="#">');var colorClass="card-"+this.color.toLowerCase();this.element.addClass(colorClass);var that=this;this.element.on("click",function(){json.playCard(that.id,that.color,function(data){if(data.result&&onSuccess){onSuccess()}else if(!data.result&&onFailure){onFailure()}});return false})};var ColorSelector=function(cardId,onSuccess,onFailure){this.element=$('<div class="color-selector"></div>');this.element.append(new ColorSelectorButton(cardId,"red",onSuccess,onFailure).element);this.element.append(new ColorSelectorButton(cardId,"blue",onSuccess,onFailure).element);this.element.append(new ColorSelectorButton(cardId,"green",onSuccess,onFailure).element);this.element.append(new ColorSelectorButton(cardId,"yellow",onSuccess,onFailure).element)};ColorSelector.prototype.remove=function(){this.element.remove()};ColorSelector.prototype.show=function(){if(!this.element.hasClass("color-selector-active")){this.element.addClass("color-selector-active");var element=this.element;setTimeout(function(){element.removeClass("color-selector-active")},3e3)}};var WildCard=function(handElement,cardJSON,onSuccess,onFailure){var value=cardJSON.value;this.id=cardJSON.id;this.colorSelector=new ColorSelector(this.id,onSuccess,onFailure);handElement.prepend(this.colorSelector.element);InteractiveCard.call(this,value,null,function(){this.colorSelector.show()})};WildCard.prototype=Object.create(InteractiveCard.prototype);WildCard.prototype.constructor=WildCard;WildCard.prototype.remove=function(){this.colorSelector.remove();InteractiveCard.prototype.remove.call(this)};var Tray=function(onDrawSuccess,onDrawFailure){this.drawCard=new DrawCard(onDrawSuccess,onDrawFailure);this.lastDiscard=null;this.element=$('<div id="tray" class=""></div>');this.element.append(this.drawCard.element)};Tray.prototype.update=function(game_data){if(game_data.last_discard){if(!this.lastDiscard){this.lastDiscard=new DiscardCard(game_data.last_discard);this.element.prepend(this.lastDiscard.element);this.lastDiscard.activate()}else if(game_data.last_discard.id!==this.lastDiscard.id){var oldDiscard=this.lastDiscard;this.lastDiscard=new DiscardCard(game_data.last_discard);this.element.prepend(this.lastDiscard.element);var newDiscard=this.lastDiscard;setTimeout(function(){oldDiscard.deactivate()},150);setTimeout(function(){oldDiscard.element.remove()},750);setTimeout(function(){newDiscard.activate()},1e3)}}var isCurrentPlayerActive=false;for(var i=0;i<game_data.players.length;i++){if(game_data.players[i].id&&game_data.players[i].active){isCurrentPlayerActive=true;break}}if(isCurrentPlayerActive){this.drawCard.activate()}else{this.drawCard.deactivate()}};var Hand=function(onPlaySuccess,onPlayFailure){this.element=$('<div id="hand" class=""></div>');this.onPlaySuccess=onPlaySuccess;this.onPlayFailure=onPlayFailure;this.cards=[];this.active=false};Hand.prototype.indexOf=function(cardId){for(var i=0;i<this.cards.length;i++){if(cardId==this.cards[i].id){return i}}return-1};Hand.prototype.removeCard=function(card){var index=this.indexOf(card.id);if(index!==-1){card.remove();this.cards.splice(index,1)}};Hand.prototype.removeCards=function(handJSON){var remove=[];var cardExists;for(var i=0;i<this.cards.length;i++){cardExists=false;for(var j=0;j<handJSON.length;j++){if(this.cards[i].id==handJSON[j].id){cardExists=true;break}}if(!cardExists){remove.push(this.cards[i])}}if(remove.length>0){for(var i=0;i<remove.length;i++){this.removeCard(remove[i])}sound.pop()}};Hand.prototype.addCards=function(handJSON){var that=this;var newCard;var cardExists;var newCardCounter=0;for(var i=0;i<handJSON.length;i++){cardExists=false;for(var j=0;j<this.cards.length;j++){if(handJSON[i].id==this.cards[j].id){cardExists=true;break}}if(!cardExists){if(handJSON[i].value==="WILD"||handJSON[i].value==="WILD_DRAW_FOUR"){newCard=new WildCard(that.element,handJSON[i],that.onPlaySuccess,that.onPlayFailure)}else{newCard=new PlayerCard(handJSON[i],that.onPlaySuccess,that.onPlayFailure)}that.cards.push(newCard);setTimeout(function(card){that.element.append(card.element);card.activate();if(!that.active){setTimeout(function(){card.deactivate()},500)}sound.swing()},newCardCounter*350,newCard);newCardCounter++}}};Hand.prototype.activate=function(){var cards=this.cards;setTimeout(function(){for(var i=0;i<cards.length;i++){cards[i].activate()}},750);this.active=true};Hand.prototype.deactivate=function(){var cards=this.cards;setTimeout(function(){for(var i=0;i<cards.length;i++){cards[i].deactivate()}},500);this.active=false};Hand.prototype.update=function(game_data){var currentPlayer;for(var i=0;i<game_data.players.length;i++){if(game_data.players[i].id){currentPlayer=game_data.players[i];break}}this.removeCards(currentPlayer.hand);this.addCards(currentPlayer.hand);if(currentPlayer.active&&!this.active){this.activate()}else if(!currentPlayer.active&&this.active){this.deactivate()}};var runGame=function(){var update=function(game_data){if(!$.isEmptyObject(game_data)){topBar.update(game_data);scoreboard.update(game_data);flash.update(game_data);tray.update(game_data);hand.update(game_data)}};json.disableCaching();var element=$('<div id="game"></div>');var topBar=new TopBar(function(){json.start(function(result){if(result){json.getState(update)}})});element.append(topBar.element);var scoreboard=new Scoreboard;element.append(scoreboard.element);var flash=new Flash;element.append(flash.element);var tray=new Tray(function(){json.getState(update)},function(){json.getState(update)});element.append(tray.element);var hand=new Hand(function(){json.getState(update)},function(){json.getState(update)});element.append(hand.element);$("body").prepend(element);json.getState(update);setInterval(function(){json.getState(update)},500)};
